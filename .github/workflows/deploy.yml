name: CI/CD Pipeline

# Triggers: push to any branch, manual dispatch, and version tags
# Skip CI if commit message contains [ci skip] or [skip ci]
on:
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production

jobs:
  # Build job - runs on all branches
  build:
    name: Build Application
    runs-on: ubuntu-latest

    # Skip if commit message contains [ci skip] or [skip ci]
    if: |
      !contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Build Next.js application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next
            public
            package.json
            package-lock.json
            ecosystem.config.js
          retention-days: 7

  # Deploy job - runs only on main branch with manual trigger or version tags
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build

    # Only run on version tags (v*.*.*)
    if: startsWith(github.ref, 'refs/tags/v')

    environment:
      name: production
      url: http://vixseg.com.br:3105

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          DEPLOY_PATH: /home/vixseg/htdocs/vixseg.com.br
        run: |
          echo "🚀 Starting deployment..."
          echo "Deploying to: $SERVER_USER@$SERVER_HOST:$DEPLOY_PATH"

          # Create backup directory
          ssh -i ~/.ssh/deploy_key -p $SERVER_PORT $SERVER_USER@$SERVER_HOST \
            "mkdir -p $DEPLOY_PATH/backups && \
             if [ -d $DEPLOY_PATH/.next ]; then \
               BACKUP_NAME=backup-\$(date +%Y%m%d-%H%M%S); \
               mkdir -p $DEPLOY_PATH/backups/\$BACKUP_NAME; \
               cp -r $DEPLOY_PATH/.next $DEPLOY_PATH/backups/\$BACKUP_NAME/; \
               echo '📦 Backup created: '\$BACKUP_NAME; \
             fi"

          # Transfer files using rsync
          rsync -avz --delete \
            -e "ssh -i ~/.ssh/deploy_key -p $SERVER_PORT" \
            .next/ $SERVER_USER@$SERVER_HOST:$DEPLOY_PATH/.next/

          rsync -avz \
            -e "ssh -i ~/.ssh/deploy_key -p $SERVER_PORT" \
            public/ $SERVER_USER@$SERVER_HOST:$DEPLOY_PATH/public/

          rsync -avz \
            -e "ssh -i ~/.ssh/deploy_key -p $SERVER_PORT" \
            package*.json ecosystem.config.js \
            $SERVER_USER@$SERVER_HOST:$DEPLOY_PATH/

          echo "✅ Files transferred successfully"

      - name: Install dependencies and reload PM2
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          DEPLOY_PATH: /home/vixseg/htdocs/vixseg.com.br
        run: |
          ssh -i ~/.ssh/deploy_key -p $SERVER_PORT $SERVER_USER@$SERVER_HOST << 'ENDSSH'
            cd $DEPLOY_PATH
            echo "📦 Installing production dependencies..."
            npm ci --production

            echo "🔄 Reloading PM2..."
            if pm2 describe vixseg-site > /dev/null 2>&1; then
              pm2 reload ecosystem.config.js --update-env
              echo "✅ PM2 reloaded successfully"
            else
              pm2 start ecosystem.config.js
              pm2 save
              echo "✅ PM2 started successfully"
            fi

            echo "📊 PM2 Status:"
            pm2 status vixseg-site
          ENDSSH

      - name: Health check
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          echo "🏥 Running health check..."
          sleep 5

          for i in {1..5}; do
            if curl -f -s -o /dev/null -w "%{http_code}" http://$SERVER_HOST:3105 | grep -q "200\|301\|302"; then
              echo "✅ Health check passed!"
              exit 0
            fi
            echo "⏳ Attempt $i/5 failed, retrying in 5 seconds..."
            sleep 5
          done

          echo "❌ Health check failed after 5 attempts"
          exit 1

      - name: Deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** production" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch/Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
